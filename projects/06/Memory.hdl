// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // DMux4Way sends load to one of four destinations based on address[13..14]:
    // ram1, ram2 for RAM, loadscreen for Screen, kbdload for Keyboard.
    DMux4Way(in=load, sel=address[13..14], a=ram1, b=ram2, c=loadscreen, d=kbdload);

    // Or gate combines ram1 & ram2 load signals for RAM16K.
    Or(a=ram1, b=ram2, out=loadram);

    // RAM16K is the main memory storage with an addressable range of 14 bits.
    // takes 'in' as data input, 'loadram' as load signal, and outputs 'ramout' based on address lines.
    RAM16K(in=in, load=loadram, address=address[0..13], out=ramout);

    // Screen is the screen hardware with a 13-bit address range.
    // receives 'in' as data, 'loadscreen' as the load control, and outputs 'scrout'.
    Screen(in=in, load=loadscreen, address=address[0..12], out=scrout);
    // Keyboard outputs 'kbdout', which holds the state of the keyboard.
    Keyboard(out=kbdout);
    // Mux4Way16 selects one of four 16-bit inputs based on 'address[13..14]'.
    // selected input is then directed to the out line.
    Mux4Way16(a=ramout, b=ramout, c=scrout, d=kbdout, sel=address[13..14], out=out);

}
