// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
        // splits load signal 8 ways based on the highest bits of the address (4, 5, and 6)
        // each of the 8 RAM8's will get a load signal, only allowing one two be written to at a time.
        DMux8Way(in=load, sel=address[3..5], a=load0, b=load1, c=load2, d=load3, e=load4, f=load5, g=load6, h=load7);
        
        // each RAM8 is capable of storing 8-16bit values
        // each RAM8 is addressed using the lower 3 bits of the address, which selects which 16-bit value is written to the block of RAM.
        RAM8(in=in, load=load0, address=address[0..2], out=out0);
        RAM8(in=in, load=load1, address=address[0..2], out=out1);
        RAM8(in=in, load=load2, address=address[0..2], out=out2);
        RAM8(in=in, load=load3, address=address[0..2], out=out3);
        RAM8(in=in, load=load4, address=address[0..2], out=out4);
        RAM8(in=in, load=load5, address=address[0..2], out=out5);
        RAM8(in=in, load=load6, address=address[0..2], out=out6);
        RAM8(in=in, load=load7, address=address[0..2], out=out7);

        // this Mux gate selects which of the 8 RAM8 block's outputs will be routed to out
        // the selection is based on the higher 3 bit address.
        Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[3..5], out=out);
}